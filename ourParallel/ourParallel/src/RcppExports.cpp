// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

// distance_
NumericMatrix distance_(NumericMatrix x);
RcppExport SEXP _ourParallel_distance_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(distance_(x));
    return rcpp_result_gen;
END_RCPP
}
// distance_parallel_
NumericMatrix distance_parallel_(NumericMatrix x);
RcppExport SEXP _ourParallel_distance_parallel_(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(distance_parallel_(x));
    return rcpp_result_gen;
END_RCPP
}
// dosomething_
NumericVector dosomething_(NumericVector x, float time);
RcppExport SEXP _ourParallel_dosomething_(SEXP xSEXP, SEXP timeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    Rcpp::traits::input_parameter< float >::type time(timeSEXP);
    rcpp_result_gen = Rcpp::wrap(dosomething_(x, time));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_ourParallel_distance_", (DL_FUNC) &_ourParallel_distance_, 1},
    {"_ourParallel_distance_parallel_", (DL_FUNC) &_ourParallel_distance_parallel_, 1},
    {"_ourParallel_dosomething_", (DL_FUNC) &_ourParallel_dosomething_, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_ourParallel(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
